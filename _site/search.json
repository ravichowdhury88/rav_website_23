[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The R Stuff",
    "section": "",
    "text": "Create SQL DB in R\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 28, 2023\n\n\nRavi C\n\n\n\n\n\n\n\n\nInteract with SQL Server\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 13, 2023\n\n\nRavi C\n\n\n\n\n\n\n\n\nFilter with str_detect\n\n\n\n\n\n\n\n\n\n\n\n\nJan 25, 2023\n\n\nRavi C\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Ravi Chowdhury",
    "section": "",
    "text": "I am a Research Data Analyst at Northwestern University and work for the Bluhm Cardiovascular Institute at Northwestern Memorial Hospital. I like working with R and try to make peoples life easy by making reproducible reports. I love working on data visualization as well as rmarkdown for reporting. I want to post about various projects and tips that I have learned and still learning to help others."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Ravi Chowdhury",
    "section": "Education",
    "text": "Education\nMasters of Public Health (MPH) - Epidemiology & Biostatistics - University of Illinois at Chicago (UIC)"
  },
  {
    "objectID": "about.html#experince",
    "href": "about.html#experince",
    "title": "Ravi Chowdhury",
    "section": "Experince",
    "text": "Experince\nResearch Data Analyst - Northwestern University"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "The R Stuff",
    "section": "",
    "text": "Blog\n\n\n\n\n\n\n\n\n\n\n\n\nCreate SQL DB in R\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 28, 2023\n\n\nRavi C\n\n\n\n\n\n\n\n\nInteract with SQL Server\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 13, 2023\n\n\nRavi C\n\n\n\n\n\n\n\n\nFilter with str_detect\n\n\n\n\n\n\n\n\n\n\n\n\nJan 25, 2023\n\n\nRavi C\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\n\n\n\n\n\n\nJan 24, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\n\n\n\n\n\nJan 21, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/post-with-code/index.html",
    "href": "blog/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "blog/welcome/index.html",
    "href": "blog/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "blog/2023-01-filter_with_str_detect/filter_with_str_detect.html",
    "href": "blog/2023-01-filter_with_str_detect/filter_with_str_detect.html",
    "title": "Filter with str_detect",
    "section": "",
    "text": "To filter using str_detect, generally you can use the code as follows:\n\nstringr::str_detect(\"ravi chowdhury\", \"ravi\")\n\n[1] TRUE\n\n\nas we can see the it returns logical TRUE which means it was able to find the string, however str_detect is case sensitive as seen below:\n\nstringr::str_detect(\"Ravi Chowdhury\", \"ravi\")\n\n[1] FALSE\n\n\nTo fix this we can use regex function ignore_case\n\nstringr::str_detect(\"Ravi Chowdhury\", regex(\"ravi\", ignore_case = TRUE))\n\n[1] TRUE"
  },
  {
    "objectID": "blog/2023-02-sql_server_connect/sql_server_connect.html",
    "href": "blog/2023-02-sql_server_connect/sql_server_connect.html",
    "title": "Interact with SQL Server",
    "section": "",
    "text": "We will go through how to connect to a sql server and fetch tables.\nTo connect to SQL Server, we will use the DBI and ODBC package. Please note you need to create a ODBC connection in Windows using the built in “ODBC Data Source” application.\n\ncon <- DBI::dbConnect(odbc::odbc(), \"db_name\")\n\nOnce the connection is create using the code above you can now use dplyr tbl function to query the tables\n\ntbl(con, \"table_name\")\n\nThe table from tbl is a lazy table and to assign it to tibble or data frame we need the collect function.\n\ntbl_tibble <-\n  tbl(con, \"table_name\") |>\n  collect()\n\nThe above code works fine if your table is under the “dbo” schema, but what if it is on a different schema?\nWe can use the in_schema function from the dbplyr package.\n\ntbl(con, dbplyr::in_schema(\"schema\", \"table_name\"))\n\n\n\n\n\n\n\nWarning\n\n\n\nThere is an issue with nanodbc where NVARCHAR fields are out of bounds for the connection and it wont return a result, I was able to find a solution on stackoverflow here.\n\n\nThe code below will basically arrrange the columns in order and the NVARCHAR fields that have CHARACTER_MAXIMUM_LENGTH = -1 will be replaced with 100000 so that they are at the end of select query.\n\ncol_names <-\n  data_type |>\n  mutate(\n    col_nm = case_when(\n      is.na(CHARACTER_MAXIMUM_LENGTH) ~ 10,\n      CHARACTER_MAXIMUM_LENGTH == -1 ~ 100000,\n      TRUE ~ as.double(CHARACTER_MAXIMUM_LENGTH)\n    )\n  ) |>\n  arrange(col_nm) |>\n  pull(COLUMN_NAME) |>\n  paste(collapse = \", \")\n\nquery <- paste(\"SELECT\", col_names, \"FROM schema.table_name\")\n\ntbl(con, sql(query))"
  },
  {
    "objectID": "blog/2023-02-create_sql_database_in_r/create_sql_database.html",
    "href": "blog/2023-02-create_sql_database_in_r/create_sql_database.html",
    "title": "Create SQL DB in R",
    "section": "",
    "text": "To produce a SQL database, we will utilize the RSQLite and DBI packages and the “iris” data set available in R.\nWe verify that the data set is available for loading.\n\niris |> head()\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\nThen, using the RSQLite and DBI packages, we create a new in-memory database.\n\ncon <- DBI::dbConnect(\n  drv = RSQLite::SQLite(),\n  dbname = \":memory:\"\n  )\n\nNext, we utilize the dbWriteTable function from the DBI package to store the “iris” data set into a SQL table in the in-memory database created in the previous step. As shown in the output, a table named “iris_sql_tbl” is created.\nIn the query below, replace “conn” with your connection name from the previous step, “name” with your preferred name for the SQL table (in this case, it is “iris_sql_tbl”), and “value” with the data set being written to the SQL database.\n\nDBI::dbWriteTable(\n  conn = con,\n  name = \"iris_sql_tbl\",\n  value = iris\n)\n\nDBI::dbListTables(con)\n\n[1] \"iris_sql_tbl\"\n\n\nUsing the tbl function from the tidyverse package, we can execute a query on the newly created SQL database table.\n\ntbl(con, \"iris_sql_tbl\")\n\n# Source:   table<iris_sql_tbl> [?? x 5]\n# Database: sqlite 3.40.0 [:memory:]\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          <dbl>       <dbl>        <dbl>       <dbl> <chr>  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# ... with more rows\n\n\nWe can also run querries using the SQL connection and not have to pull the data in R.\n\ntbl(con, \"iris_sql_tbl\") |>\n  summarize(\n    max_length = max(Sepal.Length, na.rm = TRUE),\n    min_length = min(Sepal.Length, na.rm = TRUE)\n  )\n\n# Source:   SQL [1 x 2]\n# Database: sqlite 3.40.0 [:memory:]\n  max_length min_length\n       <dbl>      <dbl>\n1        7.9        4.3\n\n\nAlternatively, we can use the dbGetQuery function from DBI to execute actual SQL code.\n\n\n\n\n\n\nWarning\n\n\n\nI ran into an issue where the querry was not able to find the column name without double quotes, will update here if I come across an explanation to it. For now, I am adding a \"\" and using “\" to escape it.\n\n\n\nDBI::dbGetQuery(\n  con,\n  \"SELECT\n  MAX(\\\"Sepal.Length\\\") AS max_length,\n  MIN(\\\"Sepal.Length\\\") AS min_length\n  FROM iris_sql_tbl\"\n)\n\n  max_length min_length\n1        7.9        4.3\n\n\nThis approach will assist in generating blog posts with SQL connections without having to connect to a live SQL Server."
  }
]