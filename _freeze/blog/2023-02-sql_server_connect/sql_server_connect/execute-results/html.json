{
  "hash": "317e84538256514d0ea351cf89a25f99",
  "result": {
    "markdown": "---\ntitle: \"Interact with SQL Server\"\nauthor: \"Ravi C\"\ndate: \"02-13-2023\"\ncategories: [tidyverse, code, sql]\nformat: html\n---\n\n\nWe will go through how to connect to a sql server and fetch tables.\n\nTo connect to SQL Server, we will use the `DBI` and `ODBC` package.\nPlease note you need to create a ODBC connection in Windows using the built in \"ODBC Data Source\" application.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- DBI::dbConnect(odbc::odbc(), \"db_name\")\n```\n:::\n\n\nOnce the connection is create using the code above you can now use `dplyr` *`tbl`* function to query the tables\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl(con, \"table_name\")\n```\n:::\n\n\nThe table from *`tbl`* is a lazy table and to assign it to tibble or data frame we need the *`collect`* function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl_tibble <-\n  tbl(con, \"table_name\") |>\n  collect()\n```\n:::\n\n\nThe above code works fine if your table is under the \"dbo\" schema, but what if it is on a different schema?\n\nWe can use the *`in_schema`* function from the `dbplyr` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl(con, dbplyr::in_schema(\"schema\", \"table_name\"))\n```\n:::\n\n\n::: {.callout-warning}\nThere is an issue with nanodbc where NVARCHAR fields are out of bounds for the connection and it wont return a result, I was able to find a solution on stackoverflow [here](https://stackoverflow.com/questions/45001152/r-dbi-odbc-error-nanodbc-nanodbc-cpp3110-07009-microsoftodbc-driver-13-fo).\n:::\n\n\nThe code below will basically arrrange the columns in order and the NVARCHAR fields that have CHARACTER_MAXIMUM_LENGTH = -1 will be replaced with 100000 so that they are at the end of select query.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_names <-\n  data_type |>\n  mutate(\n    col_nm = case_when(\n      is.na(CHARACTER_MAXIMUM_LENGTH) ~ 10,\n      CHARACTER_MAXIMUM_LENGTH == -1 ~ 100000,\n      TRUE ~ as.double(CHARACTER_MAXIMUM_LENGTH)\n    )\n  ) |>\n  arrange(col_nm) |>\n  pull(COLUMN_NAME) |>\n  paste(collapse = \", \")\n\nquery <- paste(\"SELECT\", col_names, \"FROM schema.table_name\")\n\ntbl(con, sql(query))\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}