{
  "hash": "0ec7cd981bf0fa567d91bbf6bdf51c49",
  "result": {
    "markdown": "---\ntitle: \"Create SQL DB in R\"\nauthor: \"Ravi C\"\ndate: \"02-28-2023\"\ncategories: [tidyverse, code, sql, database]\nformat: html\n---\n\n\nTo produce a SQL database, we will utilize the `RSQLite` and `DBI` packages and the \"iris\" data set available in R.\n\n\n\n\n\nWe verify that the data set is available for loading.\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n:::\n:::\n\n\nThen, using the `RSQLite` and `DBI` packages, we create a new in-memory database.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- DBI::dbConnect(\n  drv = RSQLite::SQLite(),\n  dbname = \":memory:\"\n  )\n```\n:::\n\n\nNext, we utilize the `dbWriteTable` function from the `DBI` package to store the \"iris\" data set into a SQL table in the in-memory database created in the previous step. As shown in the output, a table named \"iris_sql_tbl\" is created.\n\nIn the query below, replace \"conn\" with your connection name from the previous step, \"name\" with your preferred name for the SQL table (in this case, it is \"iris_sql_tbl\"), and \"value\" with the data set being written to the SQL database.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDBI::dbWriteTable(\n  conn = con,\n  name = \"iris_sql_tbl\",\n  value = iris\n)\n\nDBI::dbListTables(con)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"iris_sql_tbl\"\n```\n:::\n:::\n\n\nUsing the `tbl` function from the `tidyverse` package, we can execute a query on the newly created SQL database table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl(con, \"iris_sql_tbl\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   table<iris_sql_tbl> [?? x 5]\n# Database: sqlite 3.40.0 [:memory:]\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          <dbl>       <dbl>        <dbl>       <dbl> <chr>  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# ... with more rows\n```\n:::\n:::\n\n\nWe can also run querries using the SQL connection and not have to pull the data in R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl(con, \"iris_sql_tbl\") |>\n  summarize(\n    max_length = max(Sepal.Length, na.rm = TRUE),\n    min_length = min(Sepal.Length, na.rm = TRUE)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [1 x 2]\n# Database: sqlite 3.40.0 [:memory:]\n  max_length min_length\n       <dbl>      <dbl>\n1        7.9        4.3\n```\n:::\n:::\n\n\nAlternatively, we can use the `dbGetQuery` function from `DBI` to execute actual SQL code.\n\n::: {.callout-warning}\nI ran into an issue where the querry was not able to find the column name without double quotes, will update here if I come across an explanation to it. For now, I am adding a `\"\"` and using \"\\\" to escape it.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDBI::dbGetQuery(\n  con,\n  \"SELECT\n  MAX(\\\"Sepal.Length\\\") AS max_length,\n  MIN(\\\"Sepal.Length\\\") AS min_length\n  FROM iris_sql_tbl\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  max_length min_length\n1        7.9        4.3\n```\n:::\n:::\n\n\nThis approach will assist in generating blog posts with SQL connections without having to connect to a live SQL Server.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}