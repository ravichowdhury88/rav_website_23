{
  "hash": "7133b259cbdfd1fbfbc61b3a9e52c724",
  "result": {
    "markdown": "---\ntitle: \"Reorder columns\"\nauthor: \"Ravi C\"\ndate: \"03-01-2023\"\ncategories: [tidyverse, code]\nformat: html\n---\n\n\nThere are several methods to change the order of columns in R. While the select function from dplyr is a common way to do it, we will also explore other functions that can be used to rearrange columns.\n\n\n\n\n\nTo demonstrate these methods, we will use the \"us_rent_income\" dataset from the `tidyverse` package. To rearrange columns using the `select` function, we can explicitly specify the order in which we want our columns to appear.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_rent_income |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 5\n  GEOID NAME    variable estimate   moe\n  <chr> <chr>   <chr>       <dbl> <dbl>\n1 01    Alabama income      24476   136\n2 01    Alabama rent          747     3\n3 02    Alaska  income      32940   508\n4 02    Alaska  rent         1200    13\n5 04    Arizona income      27517   148\n6 04    Arizona rent          972     4\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nus_rent_income |>\n  select(GEOID, estimate, moe, NAME, variable) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 5\n  GEOID estimate   moe NAME    variable\n  <chr>    <dbl> <dbl> <chr>   <chr>   \n1 01       24476   136 Alabama income  \n2 01         747     3 Alabama rent    \n3 02       32940   508 Alaska  income  \n4 02        1200    13 Alaska  rent    \n5 04       27517   148 Arizona income  \n6 04         972     4 Arizona rent    \n```\n:::\n:::\n\n\nAlternatively, we can use the everything function from tidyselect to select our preferred order, with the exception of columns that we have explicitly specified.\n\nWe can shorten this up and little bit using `everything` from  `tidyselect`, this way we select our prefered order.\n\n1. GEOID\n2. estimate\n3. moe\n4. everything else\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_rent_income |>\n  select(GEOID, estimate, moe, everything()) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 5\n  GEOID estimate   moe NAME    variable\n  <chr>    <dbl> <dbl> <chr>   <chr>   \n1 01       24476   136 Alabama income  \n2 01         747     3 Alabama rent    \n3 02       32940   508 Alaska  income  \n4 02        1200    13 Alaska  rent    \n5 04       27517   148 Arizona income  \n6 04         972     4 Arizona rent    \n```\n:::\n:::\n\n\nIf we want to select only the numeric columns and rearrange them, we can use the `relocate` function from `dplyr` by specifying the location where the selected columns should be placed. In the example given, we move the numeric columns to be after the \"GEOID\" column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_rent_income |>\n  relocate(where(is.numeric), .after = GEOID) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 5\n  GEOID estimate   moe NAME    variable\n  <chr>    <dbl> <dbl> <chr>   <chr>   \n1 01       24476   136 Alabama income  \n2 01         747     3 Alabama rent    \n3 02       32940   508 Alaska  income  \n4 02        1200    13 Alaska  rent    \n5 04       27517   148 Arizona income  \n6 04         972     4 Arizona rent    \n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}